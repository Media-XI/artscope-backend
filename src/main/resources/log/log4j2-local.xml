<?xml version="1.0" encoding="UTF-8" ?>
<Configuration status="debug">
    <Properties>
        <Property name="LOG_FILE_NAME">application</Property>
        <Property name="LOG_BASIC_PATTERN">%d [%t] %-5level %c(%M:%L) - %m%n%wEx</Property>
        <Property name="LOG_DATEFORMAT_PATTERN">{yyyy-MM-dd HH:mm:ss.SSS}</Property>
        <Property
                name="LOG_LEVEL_PATTERN">{-%6p}{FATAL=red blink, ERROR=red, WARN=yellow bold, INFO=green, DEBUG=green bold, TRACE=blue} %style{${sys:PID}}{magenta} [%15.15t] %style{%-40.40C{1.}(%M:%L)}{cyan} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}
        </Property>
        <Property name="LOG_FILE_PATTERN">%d [%t] %-5level %c(%M:%L) - %m%n%wEx</Property>
        <Property name="LOG_REQUEST_ID_PATTERN">%style{[%equals{%X{request_id}}{}{Default}]}{Cyan}</Property>
        <Property
                name="LOGSTASH_PATTERN">[%d{ISO8601}][%-5p][%-25c]%notEmpty{[%X{pipeline.id}]}%notEmpty{[%X{plugin.id}]} %m%n]
        </Property>
    </Properties>

    <Appenders>
        <!-- ConsoleAppender -->
        <Console name="console" target="SYSTEM_OUT">
            <PatternLayout disableAnsi="false"
                           pattern="%d${LOG_DATEFORMAT_PATTERN} ${LOG_REQUEST_ID_PATTERN} %highlight${LOG_LEVEL_PATTERN}"/>
        </Console>

        <!--        <Socket name="socket" host="${env:LOGSTASH_HOST_NAME:-localhost}" port="${env:LOGSTASH_HOST_PORT:-50000}" reconnectionDelayMillis="5000">-->
        <!--            <JsonLayout compact="true" eventEol="true" properties="true" >-->
        <!--                <KeyValuePair key="app_name" value="art-dev-backend" />-->
        <!--            </JsonLayout>-->
        <!--            <PatternLayout pattern="${LOGSTASH_PATTERN}" />-->
        <!--        </Socket>-->

        <!-- FileAppender -->
        <RollingFile name="file_appender"
                     fileName="logs/${LOG_FILE_NAME}.log"
                     filePattern="logs/${LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.log">
            <JsonLayout compact="true" eventEol="true" properties="true" complete="true"/>
            <PatternLayout disableAnsi="false" pattern="${LOG_REQUEST_ID_PATTERN} ${LOG_FILE_PATTERN}"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1"/> <!-- 시간별 로그 생성 -->
                <SizeBasedTriggeringPolicy size="10MB"/>
            </Policies>
            <DefaultRolloverstrategy max="5" fileIndex="min"> <!-- 파일 5개 까지 생성 -->
                <Delete basePath="logs" maxDepth="3">
                    <IfLastModified age="7d"/>
                </Delete>
            </DefaultRolloverstrategy>
        </RollingFile>

        <RollingFile name="daily_error"
                     fileName="logs/error/error.log"
                     filePattern="logs/error/error.%d{yyyy-MM-dd}_%i.log">
            <JsonLayout compact="true" eventEol="true" properties="true" complete="true"/>
            <PatternLayout disableAnsi="false" pattern="${LOG_REQUEST_ID_PATTERN} ${LOG_FILE_PATTERN}"/>
            <!--LevelRangeFilter필터를 사용할때에 단일 level의 필터만 허용한다. -->
            <LevelRangeFilter minLevel="WARN" maxLevel="ERROR" onMatch="ACCEPT" onMismatch="DENY"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1"/> <!-- 시간별 로그 생성 -->
                <SizeBasedTriggeringPolicy size="10MB"/>
            </Policies>
            <DefaultRolloverstrategy>
                <Delete basePath="logs/error" maxDepth="3">
                    <IfLastModified age="7d"/>
                </Delete>
            </DefaultRolloverstrategy>
        </RollingFile>

        <RollingFile name="sql_file"
                     fileName="logs/sql/sql.log"
                     filePattern="logs/sql/sql.%d{yyyy-MM-dd}_%i.log">
            <JsonLayout compact="true" eventEol="true" properties="true" complete="true"/>
            <PatternLayout disableAnsi="false" pattern="${LOG_REQUEST_ID_PATTERN} ${LOG_FILE_PATTERN}"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1"/> <!-- 시간별 로그 생성 -->
                <SizeBasedTriggeringPolicy size="10MB"/>
            </Policies>
            <DefaultRolloverstrategy>
                <Delete basePath="logs/sql" maxDepth="1">
                    <IfLastModified age="7d"/>
                </Delete>
            </DefaultRolloverstrategy>
        </RollingFile>

        <RollingFile name="sql_error"
                     fileName="logs/sql/error/error.log"
                     filePattern="logs/sql/error/error.%d{yyyy-MM-dd}_%i.log">
            <JsonLayout compact="true" eventEol="true" properties="true" complete="true"/>
            <PatternLayout disableAnsi="false" pattern="${LOG_REQUEST_ID_PATTERN} ${LOG_FILE_PATTERN}"/>
            <!--LevelRangeFilter필터를 사용할때에 단일 level의 필터만 허용한다. -->
            <LevelRangeFilter minLevel="WARN" maxLevel="ERROR" onMatch="ACCEPT" onMismatch="DENY"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1"/> <!-- 시간별 로그 생성 -->
                <SizeBasedTriggeringPolicy size="10MB"/>
            </Policies>
            <DefaultRolloverstrategy>
                <Delete basePath="logs/sql/error" maxDepth="3">
                    <IfLastModified age="7d"/>
                </Delete>
            </DefaultRolloverstrategy>
        </RollingFile>


    </Appenders>

    <!--TRACE > DEBUG > INFO > WARN > ERROR > FATAL -->
    <Loggers>


        <!-- 스프링 프레임워크에서 찍는건 level을 info로 설정-->
        <logger name="org.springframework" level="info" additivity="false">
            <AppenderRef ref="console"/>
            <AppenderRef ref="file_appender"/>
        </logger>

        <!-- rolling file에는 debug, console에는 info 분리하여 처리 가능하다. -->
        <logger name="com.example.codebase" additivity="false">
            <AppenderRef ref="console" level="debug"/>
            <AppenderRef ref="file_appender" level="debug"/>
            <AppenderRef ref="daily_error" level="warn"/>
        </logger>

        <!--  SQL 쿼리 문장 -->
        <Logger name="java.sql" level="ERROR" additivity="false">
            <AppenderRef ref="console"/>
            <AppenderRef ref="sql_file"/>
            <AppenderRef ref="sql_error"/>
        </Logger>

        <Logger name="jdbc.sqlonly" level="ERROR" additivity="false">
            <AppenderRef ref="console"/>
            <AppenderRef ref="sql_file"/>
            <AppenderRef ref="sql_error"/>
        </Logger>

        <!-- log SQL with timing information, post execution -->
        <Logger name="jdbc.sqltiming" level="INFO" additivity="false">
            <AppenderRef ref="console"/>
            <AppenderRef ref="file_appender"/>
            <AppenderRef ref="sql_file"/>
        </Logger>

        <Logger name="jdbc.audit" level="WARN" additivity="false">
            <AppenderRef ref="console"/>
            <AppenderRef ref="sql_file"/>
            <AppenderRef ref="sql_error"/>
        </Logger>

        <Logger name="jdbc.resultset" level="WARN" additivity="false">
            <AppenderRef ref="console"/>
            <AppenderRef ref="sql_file"/>
            <AppenderRef ref="sql_error"/>
        </Logger>

        <Logger name="jdbc.resultsettable" level="INFO" additivity="false">
            <!--            <AppenderRef ref="console" />-->
            <AppenderRef ref="sql_file"/>
        </Logger>

        <!-- root는 모든 로그를 받는다. -->
        <Root level="info" additivity="false">
            <AppenderRef ref="console"/>
            <AppenderRef ref="file_appender"/>
            <AppenderRef ref="daily_error"/>
        </Root>
    </Loggers>

</Configuration>
